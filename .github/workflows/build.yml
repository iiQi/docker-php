name: build

on:
  schedule:
    - cron: 0 6 * * 0
  workflow_dispatch:
    inputs:
      phpVersions:
        description: '指定编译的PHP版本，多个版本间以,分隔。不填默认从配置文件获取。'
        default: ''
        required: false
        type: string
      buildExclude:
        description: '要排除的构建参数，格式：distro-suite-version。一行一个，支持正则表达式。'
        default: ''
        required: false
        type: string

env:
  RUNTIME_CONFIG: config/runtime.yaml

permissions:
  packages: write

jobs:
  prepare:
    name: Prepare
    runs-on: "ubuntu-latest"
    outputs:
      buildConfig: ${{ steps.prepare.outputs.buildConfig }}
      syncConfig: ${{ steps.prepare.outputs.syncConfig }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Prepare
        id: prepare
        run: |
          registries="${{ vars.REGISTRIES }}"
          phpVersions="${{ inputs.phpVersions }}"
          buildExclude="${{ inputs.buildExclude }}"
          buildExclude=${buildExclude:-"${{ vars.BUILD_EXCLUDE }}"}

          . tools/prepare.sh

          echo buildConfig="$buildConfig" >> $GITHUB_OUTPUT
          echo syncConfig="$syncConfig" >> $GITHUB_OUTPUT

  build:
    name: Build PHP ${{ matrix.version }}-${{ matrix.suite }}-${{ matrix.distro }}
    runs-on: "ubuntu-latest"
    needs:
      - prepare
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.buildConfig) }}
      fail-fast: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Config
        id: config
        shell: bash
        working-directory: build
        run: |
          registry="${{ matrix.registry }}"
          registry=${registry#docker.io}
          registry=${registry:+$registry/}
          image="${{ matrix.image }}"

          export registry image

          tags=$(yq '[ .[] | strenv(registry) + strenv(image) + ":" + . ] | @csv ' <<< "${{ matrix.tags }}")
          devTags=$(yq '[ .[] | strenv(registry) + strenv(image) + ":" + . ] | @csv ' <<< "${{ matrix.dev_tags }}")
          devBase=$(tr ',' '\n' <<< "$tags" | head -n 1)
          
          echo tags="$tags" >> $GITHUB_OUTPUT
          echo devTags="$devTags" >> $GITHUB_OUTPUT
          echo devBase="$devBase" >> $GITHUB_OUTPUT
          
          repoChange="${{ vars.RUNTIME_REPO_CHANGE }}"
          repoChange=${repoChange:-"after"}
          
          export repoChange
          yq '.repo.change = env(repoChange)' <<< '' > "${{ env.RUNTIME_CONFIG }}"

          cp /usr/bin/yq ./

      - name: Print Config
        shell: bash
        run: |
          echo "distro: ${{ matrix.distro }}"
          echo "suite: ${{ matrix.suite }}"
          echo "version: ${{ matrix.version }}"
          echo "cmd: ${{ matrix.cmd }}"
          echo "from: ${{ matrix.from }}"
          echo "tags: ${{ steps.config.outputs.tags }}"
          echo "devTags: ${{ steps.config.outputs.devTags }}"
          echo "devBase: ${{ steps.config.outputs.devBase }}"

      - name: Docker login Build Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ vars.BUILD_PLATFORMS }}
          pull: true
          push: true
          cache-from: type=gha,scope=${{ matrix.distro }}-${{ matrix.suite }}-${{ matrix.version }}
          cache-to: type=gha,mode=max,scope=${{ matrix.distro }}-${{ matrix.suite }}-${{ matrix.version }}
          build-args: |
            DISTRO=${{ matrix.distro }}
            SUITE=${{ matrix.suite }}
            VERSION=${{ matrix.version }}
            PHP_EXT=${{ matrix.ext }}
            PHP_CMD=${{ matrix.cmd }}
            FROM=${{ matrix.from }}

          tags: |
            ${{ steps.config.outputs.tags }}

      - name: Build Dev
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile-dev
          platforms: ${{ vars.BUILD_PLATFORMS }}
          pull: true
          push: true
          cache-from: type=gha,scope=${{ matrix.distro }}-${{ matrix.suite }}-${{ matrix.version }}-dev
          cache-to: type=gha,mode=max,scope=${{ matrix.distro }}-${{ matrix.suite }}-${{ matrix.version }}-dev
          build-args: |
            DISTRO=${{ matrix.distro }}
            SUITE=${{ matrix.suite }}
            VERSION=${{ matrix.version }}
            BASE=${{ steps.config.outputs.devBase }}

          tags: |
            ${{ steps.config.outputs.devTags }}

      - name: Image Info
        run: |
          docker run --rm ${{ steps.config.outputs.devBase }} -m
          docker images

  sync:
    name: Sync To ${{ matrix.registry }}
    runs-on: "ubuntu-latest"
    needs:
      - prepare
      - build
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.syncConfig) }}
      fail-fast: false

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Docker login ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Sync images
        run: |
          set -eux
          registry='${{ matrix.registry }}'
          image='${{ matrix.image }}'
          sync='${{ matrix.sync }}'
          
          . tools/sync.sh